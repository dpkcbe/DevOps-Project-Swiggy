pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git 'https://github.com/KastroVKiran/DevOps-Project-Swiggy.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Swiggy \
                    -Dsonar.projectKey=Swiggy '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        def imageExists = sh(script: "docker images -q dpkcbe/swiggy:latest", returnStdout: true).trim()
                        if (imageExists) {
                            sh "docker rmi dpkcbe/swiggy:latest"
                        }
                        sh "docker build -t swiggy ."
                        sh "docker tag swiggy dpkcbe/swiggy:latest "
                        sh "docker push dpkcbe/swiggy:latest "
                    }
                }
            }
        }
        stage("TRIVY") {
            steps {
                sh "trivy image dpkcbe/swiggy:latest > trivy.txt" 
            }
        }
 stage('Deploy to Container') {
    steps {
        script {
            // Check if the container is running
            def containerExists = sh(script: "docker ps -q -f name=swiggy", returnStdout: true).trim()

            // If the container exists, stop and remove it
            if (containerExists) {
                sh 'docker stop swiggy'
                sh 'docker rm swiggy'
            }

            // Run the latest container
            sh 'docker run -d --name swiggy -p 3000:3000 dpkcbe/swiggy:latest'
        }
    }
}
}
}
